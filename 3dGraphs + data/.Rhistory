# Calculate the real and imaginary parts of the roots
real_part <- -b/(2*a)
imaginary_part <- sqrt(abs(discriminant))/(2*a)
# Return the roots in complex form
return(complex(real_part, imaginary_part), complex(real_part, -imaginary_part))
} else {
# Calculate the real roots
root1 <- (-b + sqrt(discriminant))/(2*a)
root2 <- (-b - sqrt(discriminant))/(2*a)
# Return the roots
return(c(root1, root2))
}
}
print(quadratic_roots(1,2,3))
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
quadratic_roots <- function(a, b, c) {
# Calculate the discriminant
discriminant <- b^2 - 4*a*c
# Check if the discriminant is negative, indicating imaginary roots
if(discriminant < 0) {
# Calculate the real and imaginary parts of the roots
real_part <- -b/(2*a)
imaginary_part <- sqrt(abs(discriminant))/(2*a)
# Return the roots in complex form
return((complex(real_part, imaginary_part), complex(real_part, -imaginary_part))))
source("~/.active-rstudio-document")
quadratic_roots <- function(a, b, c) {
# Calculate the discriminant
discriminant <- b^2 - 4*a*c
# Check if the discriminant is negative, indicating imaginary roots
if(discriminant < 0) {
# Calculate the real and imaginary parts of the roots
real_part <- -b/(2*a)
imaginary_part <- sqrt(abs(discriminant))/(2*a)
# Return the roots in complex form
return(complex(real_part, imaginary_part), complex(real_part, -imaginary_part))
} else {
# Calculate the real roots
root1 <- (-b + sqrt(discriminant))/(2*a)
root2 <- (-b - sqrt(discriminant))/(2*a)
# Return the roots
return(c(root1, root2))
}
}
print(quadratic_roots(1,2,3))
quadratic_roots <- function(a, b, c) {
# Calculate the discriminant
discriminant <- b^2 - 4*a*c
# Check if the discriminant is negative, indicating imaginary roots
if(discriminant < 0) {
# Calculate the real and imaginary parts of the roots
real_part <- -b/(2*a)
imaginary_part <- sqrt(abs(discriminant))/(2*a)
# Return the roots in complex form
return(c(complex(real_part, imaginary_part), complex(real_part, -imaginary_part)))
} else {
# Calculate the real roots
root1 <- (-b + sqrt(discriminant))/(2*a)
root2 <- (-b - sqrt(discriminant))/(2*a)
# Return the roots
return(c(root1, root2))
}
}
print(quadratic_roots(1,2,3))
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
quadratic_roots <- function(a, b, c) {
# Calculate the discriminant
discriminant <- b^2 - 4*a*c
# Check if the discriminant is negative, indicating imaginary roots
if(discriminant < 0) {
# Calculate the real and imaginary parts of the roots
real_part <- -b/(2*a)
imaginary_part <- sqrt(abs(discriminant))/(2*a)
# Return the roots in complex form
return(c(complex(real = real_part, imaginary = imaginary_part), complex(real = real_part, imaginary = -imaginary_part)))
} else {
# Calculate the real roots
root1 <- (-b + sqrt(discriminant))/(2*a)
root2 <- (-b - sqrt(discriminant))/(2*a)
# Return the roots
return(c(root1, root2))
}
}
print(quadratic_roots(1,2,3))
print(quadratic_roots(1,5,6))
print(quadratic_roots(1,-5,6))
print(quadratic_roots(4,12,9))
quadratic_roots <- function(a, b, c) {
# Calculate the discriminant
discriminant <- b^2 - 4*a*c
if (discriminant == 0){
return root1 <- (-b + sqrt(discriminant))/(2*a)
quadratic_roots <- function(a, b, c) {
# Calculate the discriminant
discriminant <- b^2 - 4*a*c
if (discriminant == 0){
return((-b + sqrt(discriminant))/(2*a))
}
# Check if the discriminant is negative, indicating imaginary roots
else if(discriminant < 0) {
# Calculate the real and imaginary parts of the roots
real_part <- -b/(2*a)
imaginary_part <- sqrt(abs(discriminant))/(2*a)
# Return the roots in complex form
return(c(complex(real = real_part, imaginary = imaginary_part), complex(real = real_part, imaginary = -imaginary_part)))
} else {
# Calculate the real roots
root1 <- (-b + sqrt(discriminant))/(2*a)
root2 <- (-b - sqrt(discriminant))/(2*a)
# Return the roots
return(c(root1, root2))
}
}
print(quadratic_roots(4,12,9))
print(quadratic_roots(1,5,6))
print(quadratic_roots(1,2,3))
print(quadratic_roots(1,-2,3))
vectorVariance <- function(a) {
sum <- 0
for (i in a){
sum = sum + i
}
popMean <- sum / lenght(a)
var1 <- 0
for (i in a){
var1 <- i - popMean
}
return(var1 / lenght(a))
}
v <- c(1,2,3,4,5)
vectorVariance(v)
vectorVariance <- function(a) {
sum <- 0
for (i in a){
sum = sum + i
}
popMean <- sum / length(a)
var1 <- 0
for (i in a){
var1 <- i - popMean
}
return(var1 / length(a))
}
v <- c(1,2,3,4,5)
vectorVariance(v)
vectorVariance <- function(a) {
sum <- 0
for (i in a){
sum = sum + i
}
popMean <- sum / length(a)
var1 <- 0
for (i in a){
var1 <- i - popMean
}
return(var1^2 / length(a))
}
v <- c(1,2,3,4,5)
vectorVariance(v)
vectorVariance <- function(a) {
sum <- 0
for (i in a){
sum = sum + i
}
popMean <- sum / length(a)
var1 <- 0
for (i in a){
var1 <- var1 + (i - popMean)^2
}
return(var1 / length(a))
}
v <- c(1,2,3,4,5)
vectorVariance(v)
vectorPopVariance <- function(a) {
sum <- 0
for (i in a){
sum = sum + i
}
popMean <- sum / length(a)
var1 <- 0
for (i in a){
var1 <- var1 + (i - popMean)^2
}
return(var1 / length(a))
}
v <- c(1,2,3,4,5)
vectorPopVariance(v)
vectorSampleVariance <- function(a) {
sum <- 0
for (i in a){
sum = sum + i
}
popMean <- sum / length(a)
var1 <- 0
for (i in a){
var1 <- var1 + (i - popMean)^2
}
return(var1 / (length(a)-1))
}
v <- c(1,2,3,4,5)
vectorSampleVariance(v)
install.packages("plotl")
install.packages("plotly")
# plot the 3D surface
persp(x, y, z)
# To illustrate simple right circular cone
cone <- function(x, y){
sqrt(x ^ 2 + y ^ 2)
}
# prepare variables.
x <- y <- seq(-1, 1, length = 30)
z <- outer(x, y, cone)
# plot the 3D surface
persp(x, y, z)
print(getwd())
setwd("C:\Users\MISHO\Desktop\R examples\R-examples\3dGraphs + data")
setwd("C:/Users/MISHO/Desktop/R examples/R-examples/3dGraphs + data")
print(getwd())
data <- read.csv("volcanoes-2023-04-08_20-31-57_-1200.csv")
print(data)
data <- read.csv("volcanoes-2023-04-08_20-31-57_-1200.csv")
print(data$Volcano Name)
data <- read.csv("volcanoes-2023-04-08_20-31-57_-1200.csv")
print(data$VolcanoName)
data <- read.csv("volcanoes-2023-04-08_20-31-57_-1200.csv")
print(data$Volcano.Name)
data <- read.csv("volcanoes-2023-04-08_20-31-57_-1200.csv", sep=";")
print()
data <- read.csv("volcanoes-2023-04-08_20-31-57_-1200.csv", sep=",")
print()
data <- read.csv("volcanoes-2023-04-08_20-31-57_-1200.csv", sep=";")
print(data)
#define x and y
x <- -10:10
y <- -10:10
#define function to create z-values
z_values <- function(x, y) {
sqrt(x ^ 2 + y ^ 2)
}
#create z-values
z = outer(x, y, z_values)
#create 3D plot
persp(x, y, z)
RawData <- read.csv("volcanoes-2023-04-08_20-31-57_-1200.csv", sep=";")
data <- RawData
#define x and y
x <- data$Latitude
y <- -data$Longitude
RawData <- read.csv("volcanoes-2023-04-08_20-31-57_-1200.csv", sep=";")
data <- RawData
#define x and y
x <- data$Latitude
y <- data$Longitude
#define function to create z-values
z_values <- function(x, y) {
sqrt(x ^ 2 + y ^ 2)
}
#create z-values
z = outer(x, y, data$Elevation..m.)
RawData <- read.csv("volcanoes-2023-04-08_20-31-57_-1200.csv", sep=";")
data <- RawData
#define x and y
x <- data$Latitude
y <- data$Longitude
#define function to create z-values
z_values <- function(x, y) {
sqrt(x ^ 2 + y ^ 2)
}
#create z-values
z = outer(x, y, data$Elevation)
RawData <- read.csv("volcanoes-2023-04-08_20-31-57_-1200.csv", sep=";")
RawData <- read.csv("volcanoes-2023-04-08_20-31-57_-1200.csv", sep=";")
data <- RawData
#define x and y
x <- data$Latitude
y <- data$Longitude
#define function to create z-values
z_values <- function(x, y) {
sqrt(x ^ 2 + y ^ 2)
}
#create z-values
z = outer(x, y, data$Elevation)
RawData <- read.csv("volcanoes-2023-04-08_20-31-57_-1200.csv", sep=";")
data <- RawData
#define x and y
x <- data$Latitude
y <- -data$Longitude
RawData <- read.csv("volcanoes-2023-04-08_20-31-57_-1200.csv", sep=";")
data <- RawData
#define x and y
x <- data$Latitude
y <- data$Longitude
#define function to create z-values
z_values <- function() {
data$Elevation
}
#create z-values
z = outer(x, y, z_values)
RawData <- read.csv("volcanoes-2023-04-08_20-31-57_-1200.csv", sep=";")
data <- RawData
#define x and y
x <- data$Latitude
y <- -data$Longitude
RawData <- read.csv("volcanoes-2023-04-08_20-31-57_-1200.csv", sep=";")
data <- RawData
#define x and y
x <- data$Latitude
y <- data$Longitude
#define function to create z-values
z_values <- function(x, y) {
sqrt(x ^ 2 + y ^ 2)
}
#create z-values
z = outer(x, y, z_values)
RawData <- read.csv("volcanoes-2023-04-08_20-31-57_-1200.csv", sep=";")
data <- RawData
print(data$Longitude)
RawData <- read.csv("volcanoes-2023-04-08_20-31-57_-1200.csv", sep=";")
data <- RawData
#define x and y
x <- as.numeric(data$Latitude)
y <- as.numeric(data$Longitude)
#define function to create z-values
z_values <- function(x, y) {
sqrt(x ^ 2 + y ^ 2)
}
#create z-values
z = outer(x, y, z_values)
#create 3D plot
persp(x, y, z)
RawData <- read.csv("volcanoes-2023-04-08_20-31-57_-1200.csv", sep=";")
data <- RawData
#define x and y
x <- na.omit(data$Latitude)
y <- na.omit(data$Longitude)
#define function to create z-values
z_values <- function(x, y) {
sqrt(x ^ 2 + y ^ 2)
}
#create z-values
z = outer(x, y, z_values)
RawData <- read.csv("volcanoes-2023-04-08_20-31-57_-1200.csv", sep=";")
data <- RawData
#define x and y
x <- na.omit(as.numeric(data$Latitude))
y <- na.omit(as.numeric(data$Longitude))
#define function to create z-values
z_values <- function(x, y) {
sqrt(x ^ 2 + y ^ 2)
}
#create z-values
z = outer(x, y, z_values)
#create 3D plot
persp(x, y, z)
RawData <- read.csv("volcanoes-2023-04-08_20-31-57_-1200.csv", sep=";")
data <- RawData
library(plotly)
fig <- plot_ly(na.omit(data), x = ~Latitude, y = ~Longitude, z = ~Elevation, colors = c('#BF382A', '#0C4B8E'))
fig <- fig %>% add_markers()
fig <- fig %>% layout(scene = list(xaxis = list(title = 'Weight'),
yaxis = list(title = 'Gross horsepower'),
zaxis = list(title = '1/4 mile time')))
fig
RawData <- read.csv("volcanoes-2023-04-08_20-31-57_-1200.csv", sep=";")
data <- RawData
library(plotly)
fig <- plot_ly(na.omit(data), x = ~Latitude, y = ~Longitude, z = ~Elevation, colors = c('#BF382A', '#0C4B8E'))
fig <- fig %>% add_markers()
fig <- fig %>% layout(scene = list(xaxis = list(title = 'Latitude'),
yaxis = list(title = 'Longitude'),
zaxis = list(title = 'Elevation')))
fig
RawData <- read.csv("volcanoes-2023-04-08_20-31-57_-1200.csv", sep=";")
data <- RawData
library(plotly)
fig <- plot_ly(na.omit(data), x = ~Latitude, y = ~Longitude, z = ~Elevation, color= ~Elevation,colors = c('#BF382A', '#0C4B8E'))
fig <- fig %>% add_markers()
fig <- fig %>% layout(scene = list(xaxis = list(title = 'Latitude'),
yaxis = list(title = 'Longitude'),
zaxis = list(title = 'Elevation')))
fig
RawData <- read.csv("volcanoes-2023-04-08_20-31-57_-1200.csv", sep=";")
data <- RawData
library(plotly)
fig <- plot_ly(na.omit(data), x = ~Type, y = ~Status, z = ~Elevation, color= ~Elevation,colors = c('#BF382A', '#0C4B8E'))
fig <- fig %>% add_markers()
fig <- fig %>% layout(scene = list(xaxis = list(title = 'Type'),
yaxis = list(title = 'Status'),
zaxis = list(title = 'Elevation')))
fig
RawData <- read.csv("volcanoes-2023-04-08_20-31-57_-1200.csv", sep=";")
data <- RawData
library(plotly)
fig <- plot_ly(na.omit(data), x = ~Latitude, y = ~Longitude, z = ~Elevation, color= ~Elevation,colors = c('#BF382A', '#0C4B8E'))
fig <- fig %>% add_markers()
fig <- fig %>% layout(scene = list(xaxis = list(title = 'Latitude'),
yaxis = list(title = 'Longitude'),
zaxis = list(title = 'Elevation')))
fig
RawData <- read.csv("volcanoes-2023-04-08_20-31-57_-1200.csv", sep=";")
data <- RawData
info <- subset(data, Elevation>6870)
print(info)
RawData <- read.csv("volcanoes-2023-04-08_20-31-57_-1200.csv", sep=";")
data <- RawData
info <- subset(na.omit(data), Elevation>6870)
print(info)
RawData <- read.csv("volcanoes-2023-04-08_20-31-57_-1200.csv", sep=";")
data <- RawData
info <- subset(na.omit(data), Elevation>6870)
print(info)
library(plotly)
fig <- plot_ly(na.omit(data), x = ~Latitude, y = ~Longitude, z = ~Elevation, color= ~Elevation,colors = c('#BF382A', '#0C4B8E'), type = "surface")
fig <- fig %>% add_markers()
fig <- fig %>% layout(scene = list(xaxis = list(title = 'Latitude'),
yaxis = list(title = 'Longitude'),
zaxis = list(title = 'Elevation')))
fig
RawData <- read.csv("volcanoes-2023-04-08_20-31-57_-1200.csv", sep=";")
data <- RawData
info <- subset(na.omit(data), Elevation>6870)
print(info)
library(plotly)
fig <- plot_ly(na.omit(data), x = ~Latitude, y = ~Longitude, z = ~Elevation, color= ~Elevation,colors = c('#BF382A', '#0C4B8E'))
fig <- fig %>% add_markers()
fig <- fig %>% layout(scene = list(xaxis = list(title = 'Latitude'),
yaxis = list(title = 'Longitude'),
zaxis = list(title = 'Elevation')))
fig
RawData <- read.csv("volcanoes-2023-04-08_20-31-57_-1200.csv", sep=";")
data <- RawData
info <- subset(na.omit(data), Elevation>6870)
print(info)
library(plotly)
fig <- plot_ly(na.omit(data), x = ~Latitude, y = ~Longitude, z = ~Elevation, color= ~Elevation,colors = c('#ff382A', '#0C4Bff'))
fig <- fig %>% add_markers()
fig <- fig %>% layout(scene = list(xaxis = list(title = 'Latitude'),
yaxis = list(title = 'Longitude'),
zaxis = list(title = 'Elevation')))
fig
RawData <- read.csv("volcanoes-2023-04-08_20-31-57_-1200.csv", sep=";")
data <- RawData
data$Elevation <- as.factor(data$Elevation)
library(plotly)
fig <- plot_ly(na.omit(data), x = ~Latitude, y = ~Longitude, z = ~Elevation, color= ~Elevation,colors = c('#ff382A', '#0C4Bff'))
fig <- fig %>% add_markers()
fig <- fig %>% layout(scene = list(xaxis = list(title = 'Latitude'),
yaxis = list(title = 'Longitude'),
zaxis = list(title = 'Elevation')))
fig
RawData <- read.csv("volcanoes-2023-04-08_20-31-57_-1200.csv", sep=";")
data <- RawData
data$Elevation <- as.factor(data$Elevation)
library(plotly)
fig <- plot_ly(na.omit(data), x = ~Latitude, y = ~Longitude, z = ~Elevation, color= ~Elevation,colors = c('#ff382A', '#0C4Bff'))
fig <- fig %>% add_markers()
fig <- fig %>% layout(scene = list(xaxis = list(title = 'Latitude'),
yaxis = list(title = 'Longitude'),
zaxis = list(title = 'Elevation')))
fig
RawData <- read.csv("volcanoes-2023-04-08_20-31-57_-1200.csv", sep=";")
data <- RawData
#data$Elevation <- as.factor(data$Elevation)
library(plotly)
fig <- plot_ly(na.omit(data), x = ~Latitude, y = ~Longitude, z = ~Elevation, color= ~Elevation,colors = c('#ff382A', '#0C4Bff'))
fig <- fig %>% add_markers()
fig <- fig %>% layout(scene = list(xaxis = list(title = 'Latitude'),
yaxis = list(title = 'Longitude'),
zaxis = list(title = 'Elevation')))
fig
RawData <- read.csv("volcanoes-2023-04-08_20-31-57_-1200.csv", sep=";")
data <- RawData
#data$Elevation <- as.factor(data$Elevation)
library(plotly)
fig <- plot_ly(na.omit(data), x = ~Latitude, y = ~Longitude, z = ~Elevation, color= ~Elevation,colors = c('#ff382A', '#0C4Bff'))
fig <- fig %>% add_markers()
fig <- fig %>% layout(scene = list(xaxis = list(title = 'Latitude'),
yaxis = list(title = 'Longitude'),
zaxis = list(title = 'Elevation')))
fig
RawData <- read.csv("volcanoes-2023-04-08_20-31-57_-1200.csv", sep=";")
data <- RawData
data$Elevation <- as.factor(data$Elevation)
library(plotly)
fig <- plot_ly(na.omit(data), x = ~Latitude, y = ~Longitude, z = ~Elevation, color= ~Elevation,colors = c('#ff382A', '#0C4Bff'))
fig <- fig %>% add_markers()
fig <- fig %>% layout(scene = list(xaxis = list(title = 'Latitude'),
yaxis = list(title = 'Longitude'),
zaxis = list(title = 'Elevation')))
fig
RawData <- read.csv("volcanoes-2023-04-08_20-31-57_-1200.csv", sep=";")
data <- RawData
library(plotly)
fig <- plot_ly(na.omit(data), x = ~Latitude, y = ~Longitude, z = ~Elevation, color= ~Elevation,colors = c('#ff382A', '#0C4Bff'))
fig <- fig %>% add_markers()
fig <- fig %>% layout(scene = list(xaxis = list(title = 'Latitude'),
yaxis = list(title = 'Longitude'),
zaxis = list(title = 'Elevation')))
fig
RawData <- read.csv("volcanoes-2023-04-08_20-31-57_-1200.csv", sep=";")
data <- RawData
library(plotly)
fig <- plot_ly(na.omit(data), x = ~Latitude, y = ~Longitude, z = ~Elevation, color= ~Elevation,colors = c('#ff382A', '#0C4Bff'))
fig <- fig %>% add_markers()
fig <- fig %>% layout(scene = list(xaxis = list(title = 'Latitude'),
yaxis = list(title = 'Longitude'),
zaxis = list(title = 'Elevation')))
fig
